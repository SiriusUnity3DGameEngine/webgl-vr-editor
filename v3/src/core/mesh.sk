class Triangle {
  const quad int

  const quadU0 double
  const quadV0 double

  const quadU1 double
  const quadV1 double

  const quadU2 double
  const quadV2 double
}

class Quad {
  const x double
  const y double
  const z double

  const cx double
  const cy double
  const cz double

  const ux double
  const uy double
  const uz double

  const vx double
  const vy double
  const vz double

  const textureS0 double
  const textureT0 double

  const textureS1 double
  const textureT1 double

  var lightmapS0 double
  var lightmapT0 double

  var lightmapS1 double
  var lightmapT1 double

  const color Color
  const isHidden bool
}

enum CompileMode {
  VISIBLE_ONLY
  VISIBLE_AND_HIDDEN
}

class TriangleMesh {
  var triangles List<Triangle> = []

  def loadFromFile(file DataArray) bool {
    triangles = []

    if file.byteOffset + 4 > file.byteCount { return false }
    const trianglesCount = file.readInt
    if file.byteOffset + 4 * 7 * trianglesCount > file.byteCount { return false }

    for i in 0..trianglesCount {
      triangles.append(Triangle.new(
        file.readInt,
        file.readFloat, file.readFloat,
        file.readFloat, file.readFloat,
        file.readFloat, file.readFloat))
    }

    return true
  }

  def saveToFile(file DataArray) {
    file.appendInt(triangles.count)

    for tri in triangles {
      file.appendInt(tri.quad)

      file.appendFloat(tri.quadU0)
      file.appendFloat(tri.quadV0)

      file.appendFloat(tri.quadU1)
      file.appendFloat(tri.quadV1)

      file.appendFloat(tri.quadU2)
      file.appendFloat(tri.quadV2)
    }
  }

  # struct WorldVertex {
  #   highp vec3 position;
  #   lowp vec4 texture; // texture.xz * (255.0 * 256.0 / 65535.0) + texture.yw * (255.0 / 65535.0)
  #   lowp vec4 lightmap; // lightmap.xz * (255.0 * 256.0 / 65535.0) + lightmap.yw * (255.0 / 65535.0)
  #   lowp vec4 centerOffset; // position + centerOffset.xyz - 0.5
  # };
  def compileWorldVertices(mode CompileMode, quadMesh QuadMesh) DataArray {
    const array = DataArray.new
    const quads = quadMesh.quads

    for tri in triangles {
      const quad = quads[tri.quad]

      if mode != .VISIBLE_ONLY || !quad.isHidden {
        _compileWorldVertex(array, quad, tri.quadU0, tri.quadV0)
        _compileWorldVertex(array, quad, tri.quadU1, tri.quadV1)
        _compileWorldVertex(array, quad, tri.quadU2, tri.quadV2)
      }
    }

    return array
  }

  def _compileWorldVertex(array DataArray, quad Quad, u double, v double) {
    const x = quad.x + quad.ux * u + quad.vx * v
    const y = quad.y + quad.uy * u + quad.vy * v
    const z = quad.z + quad.uz * u + quad.vz * v

    const textureS = ((quad.textureS0 + (quad.textureS1 - quad.textureS0) * u) * 65535 + 0.5) as int
    const textureT = ((quad.textureT0 + (quad.textureT1 - quad.textureT0) * v) * 65535 + 0.5) as int

    const lightmapS = ((quad.lightmapS0 + (quad.lightmapS1 - quad.lightmapS0) * u) * 65535 + 0.5) as int
    const lightmapT = ((quad.lightmapT0 + (quad.lightmapT1 - quad.lightmapT0) * v) * 65535 + 0.5) as int

    array.appendFloat(x)
    array.appendFloat(y)
    array.appendFloat(z)

    array.appendByte(textureS >> 8)
    array.appendByte(textureS & 255)
    array.appendByte(textureT >> 8)
    array.appendByte(textureT & 255)

    array.appendByte(lightmapS >> 8)
    array.appendByte(lightmapS & 255)
    array.appendByte(lightmapT >> 8)
    array.appendByte(lightmapT & 255)

    # Support center offsets up to Â±0.5
    array.appendByte(Math.round(127.5 + (quad.cx - x) * 255) as int)
    array.appendByte(Math.round(127.5 + (quad.cy - y) * 255) as int)
    array.appendByte(Math.round(127.5 + (quad.cz - z) * 255) as int)
    array.appendByte(quad.isHidden ? 0 : 255)
  }

  # struct LightmapVertex {
  #   highp vec3 position;
  # };
  def compileLightmapVertices(quadMesh QuadMesh, array DataArray) {
    const quads = quadMesh.quads

    for tri in triangles {
      const quad = quads[tri.quad]

      if !quad.isHidden {
        _compileLightmapVertex(array, quad, tri.quadU0, tri.quadV0)
        _compileLightmapVertex(array, quad, tri.quadU1, tri.quadV1)
        _compileLightmapVertex(array, quad, tri.quadU2, tri.quadV2)
      }
    }
  }

  def _compileLightmapVertex(array DataArray, quad Quad, u double, v double) {
    const x = quad.x + quad.ux * u + quad.vx * v
    const y = quad.y + quad.uy * u + quad.vy * v
    const z = quad.z + quad.uz * u + quad.vz * v

    array.appendFloat(x)
    array.appendFloat(y)
    array.appendFloat(z)
  }
}

class QuadMesh {
  var quads List<Quad> = []
  var lightmapWidth = 1
  var lightmapHeight = 1
  var lightmapData = Uint8Array.new(4)

  def loadFromFile(file DataArray) bool {
    quads = []

    if file.byteOffset + 4 * 3 > file.byteCount { return false }
    const quadsCount = file.readInt
    if file.byteOffset + 4 * 22 * quadsCount > file.byteCount { return false }

    for i in 0..quadsCount {
      quads.append(Quad.new(
        file.readFloat, file.readFloat, file.readFloat,
        file.readFloat, file.readFloat, file.readFloat,
        file.readFloat, file.readFloat, file.readFloat,
        file.readFloat, file.readFloat, file.readFloat,
        file.readFloat, file.readFloat,
        file.readFloat, file.readFloat,
        file.readFloat, file.readFloat,
        file.readFloat, file.readFloat,
        file.readColor,
        file.readInt as bool))
    }

    return true
  }

  def saveToFile(file DataArray) {
    file.appendInt(quads.count)

    for quad in quads {
      file.appendFloat(quad.x)
      file.appendFloat(quad.y)
      file.appendFloat(quad.z)

      file.appendFloat(quad.cx)
      file.appendFloat(quad.cy)
      file.appendFloat(quad.cz)

      file.appendFloat(quad.ux)
      file.appendFloat(quad.uy)
      file.appendFloat(quad.uz)

      file.appendFloat(quad.vx)
      file.appendFloat(quad.vy)
      file.appendFloat(quad.vz)

      file.appendFloat(quad.textureS0)
      file.appendFloat(quad.textureT0)

      file.appendFloat(quad.textureS1)
      file.appendFloat(quad.textureT1)

      file.appendFloat(quad.lightmapS0)
      file.appendFloat(quad.lightmapT0)

      file.appendFloat(quad.lightmapS1)
      file.appendFloat(quad.lightmapT1)

      file.appendColor(quad.color)
      file.appendInt(quad.isHidden as int)
    }
  }

  def saveLightmapToFile Uint8Array {
    var canvas = document.createElementCanvas
    var context = canvas.getContext2D
    canvas.width = lightmapWidth
    canvas.height = lightmapHeight
    const imageData = context.createImageData(lightmapWidth, lightmapHeight)
    imageData.data.set(Uint8ClampedArray.new(lightmapData.buffer, lightmapData.byteOffset, lightmapData.length))
    context.putImageData(imageData, 0, 0)
    const url = canvas.toDataURL
    const comma = url.indexOf(",")
    assert(comma >= 0)
    const binary = atob(url.slice(comma + 1))
    const bytes = Uint8Array.new(binary.count)
    for i in 0..binary.count { bytes[i] = binary[i] }
    return bytes
  }

  def allocateLightmap {
    const samplesPerSide = 9
    var visibleQuadCount = 0
    var width = 1
    var height = 1

    for quad in quads {
      if !quad.isHidden {
        visibleQuadCount++
      }
    }

    # Grow in powers of 2 until the lightmap is big enough for all quads
    while (width / samplesPerSide) * (height / samplesPerSide) < visibleQuadCount {
      if width == height { width *= 2 }
      else { height *= 2 }
    }

    const quadsX = width / samplesPerSide
    const data = Uint8Array.new(width * height * 4)
    var index = 0

    for quad in quads {
      if quad.isHidden {
        continue
      }

      const color = quad.color
      const r = color.red
      const g = color.green
      const b = color.blue
      const a = color.alpha

      const s = (index % quadsX) * samplesPerSide
      const t = (index / quadsX) * samplesPerSide
      index++

      quad.lightmapS0 = (s + 0.5) / width
      quad.lightmapT0 = (t + 0.5) / height
      quad.lightmapS1 = (s + samplesPerSide - 0.5) / width
      quad.lightmapT1 = (t + samplesPerSide - 0.5) / height

      for dt in 0..samplesPerSide {
        for ds in 0..samplesPerSide {
          const j = ((s + ds) + (t + dt) * width) * 4
          data[j] = r
          data[j + 1] = g
          data[j + 2] = b
          data[j + 3] = a
        }
      }
    }

    lightmapWidth = width
    lightmapHeight = height
    lightmapData = data
  }

  # struct WorldVertex {
  #   highp vec3 position;
  #   lowp vec4 lightmap; // lightmap.xz * (255.0 * 256.0 / 65535.0) + lightmap.yw * (255.0 / 65535.0)
  #   lowp vec4 color;
  # };
  def compileLightmapVertices DataArray {
    const array = DataArray.new

    for quad in quads {
      if quad.isHidden {
        continue
      }

      _compileLightmapVertex(array, quad, 0, 0)
      _compileLightmapVertex(array, quad, 1, 0)
      _compileLightmapVertex(array, quad, 1, 1)

      _compileLightmapVertex(array, quad, 0, 0)
      _compileLightmapVertex(array, quad, 1, 1)
      _compileLightmapVertex(array, quad, 0, 1)
    }

    return array
  }

  def _compileLightmapVertex(array DataArray, quad Quad, u double, v double) {
    const ux = quad.ux
    const uy = quad.uy
    const uz = quad.uz

    const vx = quad.vx
    const vy = quad.vy
    const vz = quad.vz

    const s0 = quad.lightmapS0 * lightmapWidth
    const t0 = quad.lightmapT0 * lightmapHeight
    const s1 = quad.lightmapS1 * lightmapWidth
    const t1 = quad.lightmapT1 * lightmapHeight

    const s0i = Math.floor(s0)
    const t0i = Math.floor(t0)
    const s1i = Math.ceil(s1)
    const t1i = Math.ceil(t1)

    # Expand out by half a texel in all directions
    u = (s0i + (s1i - s0i) * u - s0) / (s1 - s0)
    v = (t0i + (t1i - t0i) * v - t0) / (t1 - t0)

    array.appendFloat(quad.x + ux * u + vx * v)
    array.appendFloat(quad.y + uy * u + vy * v)
    array.appendFloat(quad.z + uz * u + vz * v)

    array.appendFloat(uy * vz - uz * vy)
    array.appendFloat(uz * vx - ux * vz)
    array.appendFloat(ux * vy - uy * vx)

    const lightmapS = ((s0 + (s1 - s0) * u) / lightmapWidth * 65535 + 0.5) as int
    const lightmapT = ((t0 + (t1 - t0) * v) / lightmapHeight * 65535 + 0.5) as int

    array.appendByte(lightmapS >> 8)
    array.appendByte(lightmapS & 255)
    array.appendByte(lightmapT >> 8)
    array.appendByte(lightmapT & 255)

    array.appendColor(quad.color)
  }
}

class LightmapRenderer {
  const _context GPU.Context
  const _pool GPU.BufferPool
  const _lightmap GPU.Texture
  const _quadMesh QuadMesh
  const _sunlightDirection Vector3
  const _modelviewMatrix = Matrix.new
  const _orientationMatrix = Matrix.new
  const _axisX = Vector3.new
  const _axisY = Vector3.new
  const _axisZ = Vector3.new
  const _temp = Vector3.new

  var _trianglesArray DataArray = null
  var _quadsArray DataArray = null
  var _trianglesAreas List<GPU.BufferArea> = null
  var _quadsAreas List<GPU.BufferArea> = null
  var _shadowMapTexture GPU.Texture = null
  var _depthBufferTexture GPU.Texture = null
  var _depthTextureSet GPU.TextureSet = null
  var _shadowTextureSet GPU.TextureSet = null
  var _depthMaterial GPU.Material = null
  var _shadowMaterial GPU.Material = null
  var _sampleWeight = 0
  var _flip = false

  def downloadLightmap {
    _context.setTextureSet(_shadowTextureSet)
    _context.setViewport(0, 0, _quadMesh.lightmapWidth, _quadMesh.lightmapHeight)
    _context.readPixels(0, 0, _quadMesh.lightmapWidth, _quadMesh.lightmapHeight, _quadMesh.lightmapData)
    _context.setTextureSet(null)
  }

  def reset(trianglesArray DataArray, quadsArray DataArray) {
    if _trianglesAreas != null { for area in _trianglesAreas { area.free } }
    if _quadsAreas != null { for area in _quadsAreas { area.free } }

    _trianglesArray = trianglesArray
    _quadsArray = quadsArray

    _trianglesAreas = _pool.allocateAreas(App.POSITION_F3, trianglesArray.bytes)
    _quadsAreas = _pool.allocateAreas(App.SHADOW_VERTEX_FORMAT, quadsArray.bytes)

    _shadowMapTexture ?= _context.createTexture(.RGBA_NEAREST_CLAMP, SHADOW_MAP_SIZE, SHADOW_MAP_SIZE)
    _depthBufferTexture ?= _context.createTexture(.DEPTH_STENCIL, SHADOW_MAP_SIZE, SHADOW_MAP_SIZE)
    _depthTextureSet ?= _context.createTextureSet(_shadowMapTexture, _depthBufferTexture)
    _shadowTextureSet ?= _context.createTextureSet(_lightmap, null)

    _depthMaterial = _context.createMaterial(App.POSITION_F3, GLSLX_SOURCE_DEPTH_VERTEX, GLSLX_SOURCE_DEPTH_FRAGMENT)
    _shadowMaterial = _context.createMaterial(App.SHADOW_VERTEX_FORMAT, GLSLX_SOURCE_SHADOW_VERTEX, GLSLX_SOURCE_SHADOW_FRAGMENT)

    _sampleWeight = 0
  }

  def iterate {
    # Pick a random light direction
    _flip = !_flip
    if _flip {
      _axisZ.setToRandomDirection.scaleBy(0.05).add(_sunlightDirection).normalize
    } else {
      _axisZ.setToRandomDirection
      if _axisZ.y < 0 { _axisZ.y = -_axisZ.y }
    }

    # Create a coordinate system around that direction
    _axisY.setToRandomDirection
    _axisX.copyFrom(_axisY).crossWith(_axisZ).normalize
    _axisY.copyFrom(_axisZ).crossWith(_axisX).normalize

    _orientationMatrix.m00 = _axisX.x
    _orientationMatrix.m01 = _axisX.y
    _orientationMatrix.m02 = _axisX.z

    _orientationMatrix.m10 = _axisY.x
    _orientationMatrix.m11 = _axisY.y
    _orientationMatrix.m12 = _axisY.z

    _orientationMatrix.m20 = _axisZ.x
    _orientationMatrix.m21 = _axisZ.y
    _orientationMatrix.m22 = _axisZ.z

    _trianglesArray.seekTo(0)

    var xmin = Math.INFINITY
    var ymin = Math.INFINITY
    var zmin = Math.INFINITY

    var xmax = -Math.INFINITY
    var ymax = -Math.INFINITY
    var zmax = -Math.INFINITY

    for i in 0.._trianglesArray.byteCount / (4 * 3) {
      _orientationMatrix.transformPoint(_temp.setTo(
        _trianglesArray.readFloat,
        _trianglesArray.readFloat,
        _trianglesArray.readFloat))

      xmin = Math.min(xmin, _temp.x)
      ymin = Math.min(ymin, _temp.y)
      zmin = Math.min(zmin, _temp.z)

      xmax = Math.max(xmax, _temp.x)
      ymax = Math.max(ymax, _temp.y)
      zmax = Math.max(zmax, _temp.z)
    }

    _modelviewMatrix
      .loadIdentity
      .scaleBy(1.99999 / (xmax - xmin), 1.99999 / (ymax - ymin), 1.99999 / (zmin - zmax))
      .translateBy(-(xmin + xmax) / 2, -(ymin + ymax) / 2, -(zmin + zmax) / 2)
      .multiplyBy(_orientationMatrix)

    # Compute the shadow map
    _context.setTextureSet(_depthTextureSet)
    _context.setViewport(0, 0, SHADOW_MAP_SIZE, SHADOW_MAP_SIZE)
    _context.clear(.ALL)
    _depthMaterial.setUniformMat4(GLSLX_NAME_MATRIX_MODELVIEW, _modelviewMatrix)
    for area in _trianglesAreas { _context.draw(.TRIANGLES, _depthMaterial, area, .CULL_BACK_FACES) }
    _context.setTextureSet(null)

    # Accumulate the shadow map
    _context.setInterpolateBlendState(1 - _sampleWeight / (_sampleWeight + 1.0))
    _context.setTextureSet(_shadowTextureSet)
    _context.setViewport(0, 0, _lightmap.width, _lightmap.height)
    _shadowMaterial.setUniformSampler(GLSLX_NAME_TEXTURE, _shadowMapTexture, 0)
    _shadowMaterial.setUniformVec3(GLSLX_NAME_LIGHT, _axisZ.x, _axisZ.y, _axisZ.z)
    _shadowMaterial.setUniformMat4(GLSLX_NAME_MATRIX_MODELVIEW, _modelviewMatrix)
    for area in _quadsAreas { _context.draw(.TRIANGLES, _shadowMaterial, area, .NO_CULLING) }
    _context.setTextureSet(null)
    _context.setCopyBlendState
    _sampleWeight++
  }
}

namespace LightmapRenderer {
  const SHADOW_MAP_SIZE = 1024
}
