class Vector2 {
  var x = 0.0
  var y = 0.0

  def setTo(x double, y double) Vector2 {
    self.x = x
    self.y = y
    return self
  }

  def copyFrom(v Vector2) Vector2 {
    x = v.x
    y = v.y
    return self
  }

  def equals(v Vector2) bool {
    return x == v.x && y == v.y
  }

  def dot(v Vector2) double {
    return x * v.x + y * v.y
  }

  def add(v Vector2) Vector2 {
    x += v.x
    y += v.y
    return self
  }

  def subtract(v Vector2) Vector2 {
    x -= v.x
    y -= v.y
    return self
  }

  def scaleBy(v double) Vector2 {
    x *= v
    y *= v
    return self
  }

  def scaleBy(v Vector2) Vector2 {
    x *= v.x
    y *= v.y
    return self
  }

  def lengthSquared double {
    return x * x + y * y
  }

  def length double {
    return Math.sqrt(x * x + y * y)
  }

  def normalize Vector2 {
    var length = self.length
    if length > 0 {
      scaleBy(1 / length)
    }
    return self
  }

  def free {
    _pool.append(self)
  }
}

namespace Vector2 {
  const _pool List<Vector2> = []

  def allocate Vector2 {
    return _pool.isEmpty ? new : _pool.takeLast
  }
}
