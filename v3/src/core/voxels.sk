enum Cell {
  EMPTY

  GRASS
  JUMP
  ROCK
  WATER

  def color Color {
    switch self {
      case .GRASS { return Color.new(0x7F, 0xFF, 0) }
      case .JUMP { return Color.new(0xFF, 0xFF, 0x3F) }
      case .ROCK { return Color.new(0xFF, 0xFF, 0xFF) }
      case .WATER { return Color.new(0x3F, 0x7F, 0xFF) }
      default { return .TRANSPARENT }
    }
  }
}

enum LoadMode {
  CELLS_ONLY
  CELLS_AND_MESH
}

class Voxels {
  const _context GPU.Context
  const _pool GPU.BufferPool
  const _lightmap GPU.Texture
  const _quadMesh = QuadMesh.new
  var _lightmapRenderer LightmapRenderer = null
  var _chunkMap IntMap<Chunk> = {}
  var _chunkList List<Chunk> = []
  var _needsCompile = true

  def isEmptyForCollision(xmin int, ymin int, zmin int, xmax int, ymax int, zmax int) bool {
    for z = zmin; z <= zmax; z++ {
      for y = ymin; y <= ymax; y++ {
        for x = xmin; x <= xmax; x++ {
          const cell = get(x, y, z)
          if cell != .EMPTY && cell != .WATER {
            return false
          }
        }
      }
    }

    return true
  }

  def get(x int, y int, z int) Cell {
    var chunk = _chunkMap.get(_key(x, y, z), null)
    return chunk == null ? .EMPTY : chunk.get(x & CELLS_MASK, y & CELLS_MASK, z & CELLS_MASK)
  }

  def set(x int, y int, z int, cell Cell) {
    var key = _key(x, y, z)
    var map = _chunkMap
    var chunk = map.get(key, null)

    if chunk == null && cell != .EMPTY && _isValid(x, y, z) {
      chunk = Chunk.new(x & ~CELLS_MASK, y & ~CELLS_MASK, z & ~CELLS_MASK)
      map[key] = chunk
      _chunkList.append(chunk)
    }

    if chunk != null && chunk.set(x & CELLS_MASK, y & CELLS_MASK, z & CELLS_MASK, cell) {
      _needsCompile = true
    }
  }

  def compileIfNeeded {
    if _needsCompile {
      for chunk in _chunkList { chunk.generateQuads(_quadMesh) }
      _quadMesh.allocateLightmap
      _lightmap.resize(_quadMesh.lightmapWidth, _quadMesh.lightmapHeight, _quadMesh.lightmapData)
      _needsCompile = false

      const triangleVertices = DataArray.new
      for chunk in _chunkList { chunk.triangleMesh.compileLightmapVertices(_quadMesh, triangleVertices) }
      _lightmapRenderer ?= LightmapRenderer.new(_context, _pool, _lightmap, _quadMesh, Vector3.new.setTo(2, 3, 1).normalize)
      _lightmapRenderer.reset(triangleVertices, _quadMesh.compileLightmapVertices)
    }
  }

  def draw(material GPU.Material, eye Vector3, orientation Matrix) {
    compileIfNeeded

    if _lightmapRenderer != null {
      _lightmapRenderer.iterate
    }

    for chunk in _chunkList {
      chunk.distanceToEye = _temp.setTo(chunk.centerX, chunk.centerY, chunk.centerZ).subtract(eye).lengthSquared
    }

    # Sort chunks front-to-back to take maximal advantage of high-z. This uses
    # insertion sort instead of the JavaScript sort() function to avoid allocation
    # and to speed up the common case of the list being already sorted.
    const count = _chunkList.count
    for i in 1..count {
      const x = _chunkList[i]
      var j = i - 1
      while j >= 0 && _chunkList[j].distanceToEye > x.distanceToEye {
        _chunkList[j + 1] = _chunkList[j]
        j--
      }
      _chunkList[j + 1] = x
    }

    # The distance from the chunk center to a chunk corner
    const CORNER_DISTANCE = CELLS_SIZE * 0.5 * Math.sqrt(3)

    const eyeDistance =
      orientation.m20 * eye.x +
      orientation.m21 * eye.y +
      orientation.m22 * eye.z

    for chunk in _chunkList {
      const lookDistance =
        orientation.m20 * chunk.centerX +
        orientation.m21 * chunk.centerY +
        orientation.m22 * chunk.centerZ

      # Cull chunks behind the camera
      if lookDistance - CORNER_DISTANCE > eyeDistance {
        continue
      }

      _context.draw(.TRIANGLES, material,
        lookDistance + CORNER_DISTANCE + App.DISSOLVE_DISTANCE < eyeDistance ? chunk.sparseArea(_pool, _quadMesh) : chunk.denseArea(_pool, _quadMesh),
        .CULL_BACK_FACES)
    }
  }

  def draw(lines Lines) {
    for chunk in _chunkList {
      lines.appendCube(
        chunk.originX,
        chunk.originY,
        chunk.originZ,
        chunk.originX + CELLS_SIZE,
        chunk.originY + CELLS_SIZE,
        chunk.originZ + CELLS_SIZE,
        .WHITE)
    }
  }

  def loadFromFile(file DataArray, mode LoadMode) bool {
    for i in 0..FILE_HEADER.count {
      if file.byteOffset + 1 > file.byteCount { return false }
      if FILE_HEADER[i] != file.readByte { return false }
    }

    if file.byteOffset + 4 > file.byteCount { return false }
    var chunkCount = file.readInt
    if file.byteOffset + chunkCount * (4 * 3 + CHUNK_SIZE) > file.byteCount { return false }

    for chunk in _chunkList {
      chunk.freeAreas
    }

    _chunkMap = {}
    _chunkList = []
    _needsCompile = true

    while chunkCount > 0 {
      const originX = file.readInt << CELLS_SHIFT
      const originY = file.readInt << CELLS_SHIFT
      const originZ = file.readInt << CELLS_SHIFT
      if !_isValid(originX, originY, originZ) { return false }
      const chunk = Chunk.new(originX, originY, originZ)
      const key = _key(originX, originY, originZ)
      if key in _chunkMap { return false }
      for i in 0..CHUNK_SIZE { chunk.cells[i] = file.readByte }
      _chunkMap[key] = chunk
      _chunkList.append(chunk)
      chunkCount--
    }

    if mode == .CELLS_AND_MESH {
      if !_quadMesh.loadFromFile(file) {
        return false
      }

      for chunk in _chunkList {
        if !chunk.triangleMesh.loadFromFile(file) {
          return false
        }
      }

      _needsCompile = false
    }

    return true
  }

  def saveToFile DataArray {
    var file = DataArray.new
    var chunkCount = 0

    for chunk in _chunkList {
      if !chunk.isEmpty {
        chunkCount++
      }
    }

    for i in 0..FILE_HEADER.count {
      file.appendByte(FILE_HEADER[i])
    }

    file.appendInt(chunkCount)

    for chunk in _chunkList {
      if !chunk.isEmpty {
        file.appendInt(chunk.originX >> CELLS_SHIFT)
        file.appendInt(chunk.originY >> CELLS_SHIFT)
        file.appendInt(chunk.originZ >> CELLS_SHIFT)

        for i in 0..CHUNK_SIZE {
          file.appendByte(chunk.cells[i])
        }
      }
    }

    _quadMesh.saveToFile(file)

    for chunk in _chunkList {
      if !chunk.isEmpty {
        chunk.triangleMesh.saveToFile(file)
      }
    }

    return file
  }

  def saveLightmapToFile Uint8Array {
    if _lightmapRenderer != null {
      _lightmapRenderer.downloadLightmap
    }

    return _quadMesh.saveLightmapToFile
  }
}

namespace Voxels {
  const FILE_HEADER = "webglvrlevel\x01\0\0\0"
  const _vertices = DataArray.new
  const _temp = Vector3.new

  # Each chunk has a CELLS_SIZE * CELLS_SIZE * CELLS_SIZE block of cells
  const CELLS_SHIFT = 3
  const CELLS_SIZE = 1 << CELLS_SHIFT
  const CELLS_MASK = (1 << CELLS_SHIFT) - 1
  const CHUNK_SIZE = CELLS_SIZE * CELLS_SIZE * CELLS_SIZE

  # Chunk coordinates fit in a 32-bit integer (1 in chunk coordinates corresponds to CELLS_SIZE in cell coordinates)
  const CHUNK_BITS_X = 11
  const CHUNK_BITS_Y = 10
  const CHUNK_BITS_Z = 11
  const CHUNK_MASK_X = (1 << CHUNK_BITS_X) - 1
  const CHUNK_MASK_Y = (1 << CHUNK_BITS_Y) - 1
  const CHUNK_MASK_Z = (1 << CHUNK_BITS_Z) - 1

  def _isValid(cellX int, cellY int, cellZ int) bool {
    return
      cellX == (cellX << (32 - CHUNK_BITS_X - CELLS_SHIFT) >> (32 - CHUNK_BITS_X - CELLS_SHIFT)) &&
      cellY == (cellY << (32 - CHUNK_BITS_Y - CELLS_SHIFT) >> (32 - CHUNK_BITS_Y - CELLS_SHIFT)) &&
      cellZ == (cellZ << (32 - CHUNK_BITS_Z - CELLS_SHIFT) >> (32 - CHUNK_BITS_Z - CELLS_SHIFT))
  }

  def _key(cellX int, cellY int, cellZ int) int {
    assert(_isValid(cellX, cellY, cellZ))
    return
      (cellX >> CELLS_SHIFT & CHUNK_MASK_X) |
      (cellY >> CELLS_SHIFT & CHUNK_MASK_Y) << CHUNK_BITS_X |
      (cellZ >> CELLS_SHIFT & CHUNK_MASK_Z) << (CHUNK_BITS_X + CHUNK_BITS_Y)
  }

  enum AreaMode {
    DENSE
    SPARSE
  }

  class Chunk {
    const originX int
    const originY int
    const originZ int
    const cells = Uint8Array.new(CHUNK_SIZE)
    const triangleMesh = TriangleMesh.new

    var distanceToEye = 0.0 # Filled out during rendering
    var _cachedDenseArea GPU.BufferArea = null
    var _cachedSparseArea GPU.BufferArea = null

    def centerX double { return originX + CELLS_SIZE * 0.5 }
    def centerY double { return originY + CELLS_SIZE * 0.5 }
    def centerZ double { return originZ + CELLS_SIZE * 0.5 }

    def get(localX int, localY int, localZ int) Cell {
      assert(0 <= localX && localX < CELLS_SIZE)
      assert(0 <= localY && localY < CELLS_SIZE)
      assert(0 <= localZ && localZ < CELLS_SIZE)
      return cells[localX | localY << CELLS_SHIFT | localZ << 2 * CELLS_SHIFT] as Cell
    }

    def set(localX int, localY int, localZ int, cell Cell) bool {
      assert(0 <= localX && localX < CELLS_SIZE)
      assert(0 <= localY && localY < CELLS_SIZE)
      assert(0 <= localZ && localZ < CELLS_SIZE)
      var index = localX | localY << CELLS_SHIFT | localZ << 2 * CELLS_SHIFT

      if cells[index] == cell {
        return false
      }

      cells[index] = cell
      return true
    }

    def isEmpty bool {
      for i in 0..CHUNK_SIZE {
        if cells[i] as Cell != .EMPTY {
          return false
        }
      }
      return true
    }

    def freeAreas {
      _cachedDenseArea?.free
      _cachedSparseArea?.free

      _cachedDenseArea = null
      _cachedSparseArea = null
    }

    def denseArea(pool GPU.BufferPool, quadMesh QuadMesh) GPU.BufferArea {
      _cachedDenseArea ?= pool.allocate(App.WORLD_VERTEX_FORMAT, triangleMesh.compileWorldVertices(.VISIBLE_AND_HIDDEN, quadMesh).bytes)
      return _cachedDenseArea
    }

    def sparseArea(pool GPU.BufferPool, quadMesh QuadMesh) GPU.BufferArea {
      _cachedSparseArea ?= pool.allocate(App.WORLD_VERTEX_FORMAT, triangleMesh.compileWorldVertices(.VISIBLE_ONLY, quadMesh).bytes)
      return _cachedSparseArea
    }

    def generateQuads(quadMesh QuadMesh) {
      triangleMesh.triangles = []
      freeAreas

      var originX = self.originX
      var originY = self.originY
      var originZ = self.originZ
      var cells = self.cells

      # Make sure to create quads front-to-back to take maximal advantage of
      # high-z. Do the y axis first because players will be mostly looking down.

      # -y
      for y in 0..CELLS_SIZE {
        const oy = originY + y

        for x in 0..CELLS_SIZE {
          const ox = originX + x

          for z in 0..CELLS_SIZE {
            const oz = originZ + z
            const cell = cells[x | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell

            if cell != .EMPTY {
              _generateQuad(quadMesh,
                ox, oy, oz,
                ox + 0.5, oy + 0.5, oz + 0.5,
                1, 0, 0,
                0, 0, 1,
                cell.color,
                y > 0 && cells[x | (y - 1) << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell != .EMPTY)
            }
          }
        }
      }

      # +y
      for y_inv in 0..CELLS_SIZE {
        const y = y_inv ^ CELLS_MASK
        const oy = originY + y + 1

        for x in 0..CELLS_SIZE {
          const ox = originX + x

          for z in 0..CELLS_SIZE {
            const oz = originZ + z
            const cell = cells[x | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell

            if cell != .EMPTY {
              _generateQuad(quadMesh,
                ox, oy, oz,
                ox + 0.5, oy - 0.5, oz + 0.5,
                0, 0, 1,
                1, 0, 0,
                cell.color,
                y < CELLS_MASK && cells[x | (y + 1) << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell != .EMPTY)
            }
          }
        }
      }

      # -x
      for x in 0..CELLS_SIZE {
        const ox = originX + x

        for y in 0..CELLS_SIZE {
          const oy = originY + y

          for z in 0..CELLS_SIZE {
            const oz = originZ + z
            const cell = cells[x | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell

            if cell != .EMPTY {
              _generateQuad(quadMesh,
                ox, oy, oz,
                ox + 0.5, oy + 0.5, oz + 0.5,
                0, 0, 1,
                0, 1, 0,
                cell.color,
                x > 0 && cells[(x - 1) | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell != .EMPTY)
            }
          }
        }
      }

      # +x
      for x_inv in 0..CELLS_SIZE {
        const x = x_inv ^ CELLS_MASK
        const ox = originX + x + 1

        for y in 0..CELLS_SIZE {
          const oy = originY + y

          for z in 0..CELLS_SIZE {
            const oz = originZ + z
            const cell = cells[x | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell

            if cell != .EMPTY {
              _generateQuad(quadMesh,
                ox, oy, oz,
                ox - 0.5, oy + 0.5, oz + 0.5,
                0, 1, 0,
                0, 0, 1,
                cell.color,
                x < CELLS_MASK && cells[(x + 1) | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell != .EMPTY)
            }
          }
        }
      }

      # -z
      for z in 0..CELLS_SIZE {
        const oz = originZ + z

        for x in 0..CELLS_SIZE {
          const ox = originX + x

          for y in 0..CELLS_SIZE {
            const oy = originY + y
            const cell = cells[x | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell

            if cell != .EMPTY {
              _generateQuad(quadMesh,
                ox, oy, oz,
                ox + 0.5, oy + 0.5, oz + 0.5,
                0, 1, 0,
                1, 0, 0,
                cell.color,
                z > 0 && cells[x | y << CELLS_SHIFT | (z - 1) << 2 * CELLS_SHIFT] as Cell != .EMPTY)
            }
          }
        }
      }

      # +z
      for z_inv in 0..CELLS_SIZE {
        const z = z_inv ^ CELLS_MASK
        const oz = originZ + z + 1

        for x in 0..CELLS_SIZE {
          const ox = originX + x

          for y in 0..CELLS_SIZE {
            const oy = originY + y
            const cell = cells[x | y << CELLS_SHIFT | z << 2 * CELLS_SHIFT] as Cell

            if cell != .EMPTY {
              _generateQuad(quadMesh,
                ox, oy, oz,
                ox + 0.5, oy + 0.5, oz - 0.5,
                1, 0, 0,
                0, 1, 0,
                cell.color,
                z < CELLS_MASK && cells[x | y << CELLS_SHIFT | (z + 1) << 2 * CELLS_SHIFT] as Cell != .EMPTY)
            }
          }
        }
      }
    }

    def _generateQuad(
      quadMesh QuadMesh,
      x double, y double, z double,
      cx double, cy double, cz double,
      ux double, uy double, uz double,
      vx double, vy double, vz double,
      color Color,
      isHidden bool
    ) {
      var s = (x * ux + y * uy + z * uz) / 3
      var t = (x * vx + y * vy + z * vz) / 3
      var index = quadMesh.quads.count

      s -= Math.floor(s)
      t -= Math.floor(t)

      quadMesh.quads.append(Quad.new(
        x, y, z,
        cx, cy, cz,
        ux, uy, uz,
        vx, vy, vz,
        s, t,
        s + 1.0 / 3, t + 1.0 / 3,
        0, 0,
        0, 0,
        color,
        isHidden))

      triangleMesh.triangles.append(Triangle.new(index, 0, 0, 1, 0, 1, 1))
      triangleMesh.triangles.append(Triangle.new(index, 0, 0, 1, 1, 0, 1))
    }
  }
}
