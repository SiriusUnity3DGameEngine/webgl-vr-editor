class Lines {
  const _context GPU.Context
  const _pool GPU.BufferPool

  def append(x0 double, y0 double, z0 double, x1 double, y1 double, z1 double, color Color) {
    var cx = (x0 + x1) * 0.5
    var cy = (y0 + y1) * 0.5
    var cz = (z0 + z1) * 0.5

    _vertices.appendFloat(x0)
    _vertices.appendFloat(y0)
    _vertices.appendFloat(z0)
    _vertices.appendFloat(cx)
    _vertices.appendFloat(cy)
    _vertices.appendFloat(cz)
    _vertices.appendColor(color)

    _vertices.appendFloat(x1)
    _vertices.appendFloat(y1)
    _vertices.appendFloat(z1)
    _vertices.appendFloat(cx)
    _vertices.appendFloat(cy)
    _vertices.appendFloat(cz)
    _vertices.appendColor(color)
  }

  def appendCube(x0 double, y0 double, z0 double, x1 double, y1 double, z1 double, color Color) {
    append(x0, y0, z0, x1, y0, z0, color)
    append(x0, y0, z0, x0, y1, z0, color)
    append(x0, y0, z0, x0, y0, z1, color)

    append(x1, y0, z0, x1, y1, z0, color)
    append(x0, y1, z0, x0, y1, z1, color)
    append(x0, y0, z1, x1, y0, z1, color)

    append(x1, y0, z0, x1, y0, z1, color)
    append(x0, y1, z0, x1, y1, z0, color)
    append(x0, y0, z1, x0, y1, z1, color)

    append(x1, y1, z1, x0, y1, z1, color)
    append(x1, y1, z1, x1, y0, z1, color)
    append(x1, y1, z1, x1, y1, z0, color)
  }

  def draw(material GPU.Material) {
    if !_vertices.isEmpty {
      const area = _pool.allocate(material.format, _vertices.bytes)
      _context.draw(.LINES, material, area, .NO_CULLING)
      area.free
      _vertices.clear
    }
  }
}

namespace Lines {
  const _vertices = DataArray.new
}
