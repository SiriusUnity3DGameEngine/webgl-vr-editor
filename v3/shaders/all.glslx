// Do not use mediump, causes vertices to wiggle on iOS
precision highp float;

uniform sampler2D lightmap;
uniform sampler2D texture;

uniform mat4 matrixModelview;
uniform mat4 matrixProjection;
uniform vec4 eye;

uniform float flip;
uniform vec3 light;
uniform vec4 inverseDistortion;
uniform vec4 lensFrustum;
uniform vec4 noLensFrustum;
uniform vec4 viewport;

attribute vec3 normal3;
attribute vec3 position3;
attribute vec4 center4;
attribute vec4 color4;
attribute vec4 lightmap4;
attribute vec4 texture4;

varying float _value;
varying vec2 _lightmap2;
varying vec2 _texture2;
varying vec3 _position3;
varying vec4 _color4;

// Frustum coordinates
const int LEFT = 0;
const int TOP = 1;
const int RIGHT = 2;
const int BOTTOM = 3;

// Viewport coordinates
const int X = 0;
const int Y = 1;
const int W = 2;
const int H = 3;

vec2 decodePackedVec2(vec4 value) {
  return value.xz * (255.0 * 256.0 / 65535.0) + value.yw * (255.0 / 65535.0);
}

////////////////////////////////////////////////////////////////////////////////

export void maskVertex() {
  _value = position3.z;
  gl_Position = vec4(position3.x * flip, position3.y, 0, 1);
}

export void maskFragment() {
  gl_FragColor = vec4(_value);
}

////////////////////////////////////////////////////////////////////////////////

export void depthVertex() {
  _value = (gl_Position = matrixModelview * vec4(position3, 1)).z * 0.5 + 0.5;
}

export void depthFragment() {
  gl_FragColor = vec4(_value);
}

////////////////////////////////////////////////////////////////////////////////

export void shadowVertex() {
  _color4 = color4;
  _value = sqrt(max(0.0, dot(light, normal3))); // sqrt() for gamma correction
  _position3 = (matrixModelview * vec4(position3, 1)).xyz * 0.5 + 0.5;
  gl_Position = vec4(decodePackedVec2(lightmap4) * 2.0 - 1.0, 0, 1);
}

export void shadowFragment() {
  float depth = texture2D(texture, _position3.xy).x;
  gl_FragColor = vec4(_color4.xyz * (_value * float(depth + 2.0 / 255.0 > _position3.z)), 1);
}

////////////////////////////////////////////////////////////////////////////////

vec4 worldPosition() {
  vec3 center3 = position3 + center4.xyz - 0.5;
  return matrixProjection * matrixModelview * vec4(mix(position3, center3, clamp(dot(eye.xyz, center3) - eye.w, 0.0, 1.0)), 1);
}

export void worldVertex() {
  _value = center4.w;
  _texture2 = decodePackedVec2(texture4);
  _lightmap2 = decodePackedVec2(lightmap4);
  gl_Position = worldPosition();
}

export void worldVertexDistorted() {
  vec4 position = worldPosition();
  float w = abs(position.w);

  // Apply the distortion correction directly in the vertex shader since that's
  // much faster than rendering to a texture and distorting the texture. Make
  // sure to temporarily undo the perspective divide by the "w" coordinate.
  // Then multiply "w" back so the fragment shader is free of dependent reads.
  float p = mix(lensFrustum[LEFT], lensFrustum[RIGHT], (0.5 + position.x / w * 0.5 * flip - viewport[X]) / viewport[W]);
  float q = mix(lensFrustum[BOTTOM], lensFrustum[TOP], (0.5 + position.y / w * 0.5 - viewport[Y]) / viewport[H]);
  float r2 = p * p + q * q;
  float d = 1.0 + r2 * (inverseDistortion.x + r2 * (inverseDistortion.y + r2 * (inverseDistortion.z + r2 * inverseDistortion.w)));
  position.x = ((p * d - noLensFrustum[LEFT]) / (noLensFrustum[RIGHT] - noLensFrustum[LEFT]) * 2.0 - 1.0) * w * flip;
  position.y = ((q * d - noLensFrustum[BOTTOM]) / (noLensFrustum[TOP] - noLensFrustum[BOTTOM]) * 2.0 - 1.0) * w;

  _value = center4.w;
  _texture2 = decodePackedVec2(texture4);
  _lightmap2 = decodePackedVec2(lightmap4);
  gl_Position = position;
}

export void worldFragment() {
  gl_FragColor =
    (0.05 + 0.95 * texture2D(lightmap, _lightmap2)) *
    (_value * (1.0 - 0.1 * float(texture2D(texture, _texture2).x > 0.5)));
}
