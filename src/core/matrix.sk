class Matrix {
  var m00 = 1.0
  var m01 = 0.0
  var m02 = 0.0
  var m03 = 0.0

  var m10 = 0.0
  var m11 = 1.0
  var m12 = 0.0
  var m13 = 0.0

  var m20 = 0.0
  var m21 = 0.0
  var m22 = 1.0
  var m23 = 0.0

  var m30 = 0.0
  var m31 = 0.0
  var m32 = 0.0
  var m33 = 1.0

  def loadIdentity Matrix {
    copyFrom(_identity)
    return self
  }

  def translateBy(x double, y double, z double) Matrix {
    return multiplyBy(_spare.createTranslate(x, y, z))
  }

  def scaleBy(x double, y double, z double) Matrix {
    return multiplyBy(_spare.createScale(x, y, z))
  }

  def rotateBy(axisX double, axisY double, axisZ double, radians double) Matrix {
    return multiplyBy(_spare.createRotate(axisX, axisY, axisZ, radians))
  }

  def copyFrom(m Matrix) Matrix {
    m00 = m.m00
    m01 = m.m01
    m02 = m.m02
    m03 = m.m03

    m10 = m.m10
    m11 = m.m11
    m12 = m.m12
    m13 = m.m13

    m20 = m.m20
    m21 = m.m21
    m22 = m.m22
    m23 = m.m23

    m30 = m.m30
    m31 = m.m31
    m32 = m.m32
    m33 = m.m33

    return self
  }

  def createTranslate(x double, y double, z double) Matrix {
    m03 = x
    m13 = y
    m23 = z

    m00 = 1
    m11 = 1
    m22 = 1
    m33 = 1

    m01 = 0
    m02 = 0
    m10 = 0
    m12 = 0
    m20 = 0
    m21 = 0
    m30 = 0
    m31 = 0
    m32 = 0

    return self
  }

  def createScale(x double, y double, z double) Matrix {
    m00 = x
    m11 = y
    m22 = z

    m33 = 1

    m01 = 0
    m02 = 0
    m03 = 0
    m10 = 0
    m12 = 0
    m13 = 0
    m20 = 0
    m21 = 0
    m23 = 0
    m30 = 0
    m31 = 0
    m32 = 0

    return self
  }

  def createRotate(axisX double, axisY double, axisZ double, radians double) Matrix {
    # The axis must already be normalized
    assert(axisX * axisX + axisY * axisY + axisZ * axisZ > 0.999)
    assert(axisX * axisX + axisY * axisY + axisZ * axisZ < 1.001)

    var c = Math.cos(radians)
    var s = Math.sin(radians)
    var t = 1 - c

    m00 = axisX * axisX * t + c
    m01 = axisX * axisY * t - axisZ * s
    m02 = axisX * axisZ * t + axisY * s

    m10 = axisY * axisX * t + axisZ * s
    m11 = axisY * axisY * t + c
    m12 = axisY * axisZ * t - axisX * s

    m20 = axisZ * axisX * t - axisY * s
    m21 = axisZ * axisY * t + axisX * s
    m22 = axisZ * axisZ * t + c

    m33 = 1

    m03 = 0
    m13 = 0
    m23 = 0
    m30 = 0
    m31 = 0
    m32 = 0

    return self
  }

  def createPerspective(fovRadians double, aspectRatio double, near double, far double) Matrix {
    var y = Math.tan(fovRadians / 2) * near
    var x = y * aspectRatio
    return createFrustum(-x, x, -y, y, near, far)
  }

  def createFrustum(left double, right double, bottom double, top double, near double, far double) Matrix {
    m00 = 2 * near / (right - left)
    m02 = (right + left) / (right - left)

    m11 = 2 * near / (top - bottom)
    m12 = (top + bottom) / (top - bottom)

    m22 = -(far + near) / (far - near)
    m23 = -2 * far * near / (far - near)

    m32 = -1

    m01 = 0
    m03 = 0
    m10 = 0
    m13 = 0
    m20 = 0
    m21 = 0
    m30 = 0
    m31 = 0
    m33 = 0

    return self
  }

  def createOrtho(left double, right double, bottom double, top double, near double, far double) Matrix {
    m00 = 2 / (right - left)
    m03 = -(right + left) / (right - left)

    m11 = 2 / (top - bottom)
    m13 = -(top + bottom) / (top - bottom)

    m22 = -2 / (far - near)
    m23 = -(far + near) / (far - near)

    m33 = 1

    m01 = 0
    m02 = 0
    m10 = 0
    m12 = 0
    m20 = 0
    m21 = 0
    m30 = 0
    m31 = 0
    m32 = 0

    return self
  }

  def multiplyBy(m Matrix) Matrix {
    var m00 = self.m00
    var m01 = self.m01
    var m02 = self.m02
    var m03 = self.m03

    var m10 = self.m10
    var m11 = self.m11
    var m12 = self.m12
    var m13 = self.m13

    var m20 = self.m20
    var m21 = self.m21
    var m22 = self.m22
    var m23 = self.m23

    var m30 = self.m30
    var m31 = self.m31
    var m32 = self.m32
    var m33 = self.m33

    self.m00 = m00 * m.m00 + m01 * m.m10 + m02 * m.m20 + m03 * m.m30
    self.m01 = m00 * m.m01 + m01 * m.m11 + m02 * m.m21 + m03 * m.m31
    self.m02 = m00 * m.m02 + m01 * m.m12 + m02 * m.m22 + m03 * m.m32
    self.m03 = m00 * m.m03 + m01 * m.m13 + m02 * m.m23 + m03 * m.m33

    self.m10 = m10 * m.m00 + m11 * m.m10 + m12 * m.m20 + m13 * m.m30
    self.m11 = m10 * m.m01 + m11 * m.m11 + m12 * m.m21 + m13 * m.m31
    self.m12 = m10 * m.m02 + m11 * m.m12 + m12 * m.m22 + m13 * m.m32
    self.m13 = m10 * m.m03 + m11 * m.m13 + m12 * m.m23 + m13 * m.m33

    self.m20 = m20 * m.m00 + m21 * m.m10 + m22 * m.m20 + m23 * m.m30
    self.m21 = m20 * m.m01 + m21 * m.m11 + m22 * m.m21 + m23 * m.m31
    self.m22 = m20 * m.m02 + m21 * m.m12 + m22 * m.m22 + m23 * m.m32
    self.m23 = m20 * m.m03 + m21 * m.m13 + m22 * m.m23 + m23 * m.m33

    self.m30 = m30 * m.m00 + m31 * m.m10 + m32 * m.m20 + m33 * m.m30
    self.m31 = m30 * m.m01 + m31 * m.m11 + m32 * m.m21 + m33 * m.m31
    self.m32 = m30 * m.m02 + m31 * m.m12 + m32 * m.m22 + m33 * m.m32
    self.m33 = m30 * m.m03 + m31 * m.m13 + m32 * m.m23 + m33 * m.m33

    return self
  }

  def equals(m Matrix) bool {
    return
      m00 == m.m00 && m01 == m.m01 && m02 == m.m02 && m03 == m.m03 &&
      m10 == m.m10 && m11 == m.m11 && m12 == m.m12 && m13 == m.m13 &&
      m20 == m.m20 && m21 == m.m21 && m22 == m.m22 && m23 == m.m23 &&
      m30 == m.m30 && m31 == m.m31 && m32 == m.m32 && m33 == m.m33
  }

  def invert {
    var m00 = self.m00
    var m01 = self.m01
    var m02 = self.m02
    var m03 = self.m03

    var m10 = self.m10
    var m11 = self.m11
    var m12 = self.m12
    var m13 = self.m13

    var m20 = self.m20
    var m21 = self.m21
    var m22 = self.m22
    var m23 = self.m23

    var m30 = self.m30
    var m31 = self.m31
    var m32 = self.m32
    var m33 = self.m33

    self.m00 = m11*m22*m33 - m11*m32*m23 - m12*m21*m33 + m12*m31*m23 + m13*m21*m32 - m13*m31*m22
    self.m01 = -m01*m22*m33 + m01*m32*m23 + m02*m21*m33 - m02*m31*m23 - m03*m21*m32 + m03*m31*m22
    self.m02 = m01*m12*m33 - m01*m32*m13 - m02*m11*m33 + m02*m31*m13 + m03*m11*m32 - m03*m31*m12
    self.m03 = -m01*m12*m23 + m01*m22*m13 + m02*m11*m23 - m02*m21*m13 - m03*m11*m22 + m03*m21*m12

    self.m10 = -m10*m22*m33 + m10*m32*m23 + m12*m20*m33 - m12*m30*m23 - m13*m20*m32 + m13*m30*m22
    self.m11 = m00*m22*m33 - m00*m32*m23 - m02*m20*m33 + m02*m30*m23 + m03*m20*m32 - m03*m30*m22
    self.m12 = -m00*m12*m33 + m00*m32*m13 + m02*m10*m33 - m02*m30*m13 - m03*m10*m32 + m03*m30*m12
    self.m13 = m00*m12*m23 - m00*m22*m13 - m02*m10*m23 + m02*m20*m13 + m03*m10*m22 - m03*m20*m12

    self.m20 = m10*m21*m33 - m10*m31*m23 - m11*m20*m33 + m11*m30*m23 + m13*m20*m31 - m13*m30*m21
    self.m21 = -m00*m21*m33 + m00*m31*m23 + m01*m20*m33 - m01*m30*m23 - m03*m20*m31 + m03*m30*m21
    self.m22 = m00*m11*m33 - m00*m31*m13 - m01*m10*m33 + m01*m30*m13 + m03*m10*m31 - m03*m30*m11
    self.m23 = -m00*m11*m23 + m00*m21*m13 + m01*m10*m23 - m01*m20*m13 - m03*m10*m21 + m03*m20*m11

    self.m30 = -m10*m21*m32 + m10*m31*m22 + m11*m20*m32 - m11*m30*m22 - m12*m20*m31 + m12*m30*m21
    self.m31 = m00*m21*m32 - m00*m31*m22 - m01*m20*m32 + m01*m30*m22 + m02*m20*m31 - m02*m30*m21
    self.m32 = -m00*m11*m32 + m00*m31*m12 + m01*m10*m32 - m01*m30*m12 - m02*m10*m31 + m02*m30*m11
    self.m33 = m00*m11*m22 - m00*m21*m12 - m01*m10*m22 + m01*m20*m12 + m02*m10*m21 - m02*m20*m11

    var det = m00 * self.m00 + m01 * self.m10 + m02 * self.m20 + m03 * self.m30

    self.m00 /= det
    self.m01 /= det
    self.m02 /= det
    self.m03 /= det

    self.m10 /= det
    self.m11 /= det
    self.m12 /= det
    self.m13 /= det

    self.m20 /= det
    self.m21 /= det
    self.m22 /= det
    self.m23 /= det

    self.m30 /= det
    self.m31 /= det
    self.m32 /= det
    self.m33 /= det
  }
}

namespace Matrix {
  const _identity = new
  const _spare = new
}
