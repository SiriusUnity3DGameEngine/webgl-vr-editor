enum Cell {
  SOLID
  EMPTY
  EMISSIVE
  RED
  BLUE

  def color Color {
    return _colors[self]
  }
}

namespace Cell {
  const _colors = [
    Color.new(191, 191, 191),
    Color.TRANSPARENT,
    Color.WHITE,
    Color.new(191, 0, 0),
    Color.new(0, 0, 223),
  ]
}

class TraceResult {
  var cellX = 0
  var cellY = 0
  var cellZ = 0
  var normalX = 0
  var normalY = 0
  var normalZ = 0
  var distance = 0.0
}

type Delta : int {
  def x int {
    return self as int & 1
  }

  def y int {
    return self as int >> 1 & 1
  }

  def z int {
    return self as int >> 2
  }
}

namespace Delta {
  const X = new(1, 0, 0)
  const Y = new(0, 1, 0)
  const Z = new(0, 0, 1)

  def new(x int, y int, z int) Delta {
    assert(x == 0 || x == 1)
    assert(y == 0 || y == 1)
    assert(z == 0 || z == 1)
    return (x | y << 1 | z << 2) as Delta
  }
}

flags Normal {
  XNEG
  XPOS
  YNEG
  YPOS
  ZNEG
  ZPOS

  def x int {
    return (self == XPOS) as int - (self == XNEG) as int
  }

  def y int {
    return (self == YPOS) as int - (self == YNEG) as int
  }

  def z int {
    return (self == ZPOS) as int - (self == ZNEG) as int
  }
}

class Voxels {
  const _context GPU.Context
  const _material GPU.Material
  const _pool GPU.BufferPool
  const _lightmap Lightmap
  const _chunkMap IntMap<Chunk> = {}
  const _chunkList List<Chunk> = []

  def get(x int, y int, z int) Cell {
    var chunk = _chunkMap.get(_key(x, y, z), null)
    return chunk == null ? .SOLID : chunk.get(x & CELLS_MASK, y & CELLS_MASK, z & CELLS_MASK)
  }

  def set(x int, y int, z int, cell Cell) {
    var key = _key(x, y, z)
    var map = _chunkMap
    var chunk = map.get(key, null)

    if chunk == null && cell != .SOLID {
      if !_isValid(x, y, z) {
        return
      }

      chunk = Chunk.new(_lightmap, x & ~CELLS_MASK, y & ~CELLS_MASK, z & ~CELLS_MASK)

      var xneg = map.get(_key(x - CELLS_SIZE, y, z), null)
      var xpos = map.get(_key(x + CELLS_SIZE, y, z), null)
      var yneg = map.get(_key(x, y - CELLS_SIZE, z), null)
      var ypos = map.get(_key(x, y + CELLS_SIZE, z), null)
      var zneg = map.get(_key(x, y, z - CELLS_SIZE), null)
      var zpos = map.get(_key(x, y, z + CELLS_SIZE), null)

      if xneg != null {
        assert(xneg.xpos == null)
        assert(xneg.originX == chunk.originX - CELLS_SIZE)
        assert(xneg.originY == chunk.originY)
        assert(xneg.originZ == chunk.originZ)
        chunk.xneg = xneg
        xneg.xpos = chunk
      }

      if xpos != null {
        assert(xpos.xneg == null)
        assert(xpos.originX == chunk.originX + CELLS_SIZE)
        assert(xpos.originY == chunk.originY)
        assert(xpos.originZ == chunk.originZ)
        chunk.xpos = xpos
        xpos.xneg = chunk
      }

      if yneg != null {
        assert(yneg.ypos == null)
        assert(yneg.originX == chunk.originX)
        assert(yneg.originY == chunk.originY - CELLS_SIZE)
        assert(yneg.originZ == chunk.originZ)
        chunk.yneg = yneg
        yneg.ypos = chunk
      }

      if ypos != null {
        assert(ypos.yneg == null)
        assert(ypos.originX == chunk.originX)
        assert(ypos.originY == chunk.originY + CELLS_SIZE)
        assert(ypos.originZ == chunk.originZ)
        chunk.ypos = ypos
        ypos.yneg = chunk
      }

      if zneg != null {
        assert(zneg.zpos == null)
        assert(zneg.originX == chunk.originX)
        assert(zneg.originY == chunk.originY)
        assert(zneg.originZ == chunk.originZ - CELLS_SIZE)
        chunk.zneg = zneg
        zneg.zpos = chunk
      }

      if zpos != null {
        assert(zpos.zneg == null)
        assert(zpos.originX == chunk.originX)
        assert(zpos.originY == chunk.originY)
        assert(zpos.originZ == chunk.originZ + CELLS_SIZE)
        chunk.zpos = zpos
        zpos.zneg = chunk
      }

      map[key] = chunk
      _chunkList.append(chunk)
    }

    chunk?.set(x & CELLS_MASK, y & CELLS_MASK, z & CELLS_MASK, cell)
  }

  def draw {
    # Allocate all quads first, may invalidate the lightmap
    for chunk in _chunkList {
      chunk.quads
    }

    # Upload the texture now that lightmap invalidation is done
    _material.setUniformSampler(GLSLX_NAME_TEXTURE, _lightmap.texture, 0)

    # Allocate all areas next, won't invalidate the lightmap
    for chunk in _chunkList {
      _context.draw(.TRIANGLES, _material, chunk.area(_pool))
    }
  }

  def trace(x double, y double, z double, rayX double, rayY double, rayZ double, result TraceResult) bool {
    var cellX = result.cellX = Math.floor(x) as int
    var cellY = result.cellY = Math.floor(y) as int
    var cellZ = result.cellZ = Math.floor(z) as int

    result.normalX = 0
    result.normalY = 0
    result.normalZ = 0

    const floorX = (cellX - x) / rayX
    const floorY = (cellY - y) / rayY
    const floorZ = (cellZ - z) / rayZ

    const ceilX = (cellX + 1 - x) / rayX
    const ceilY = (cellY + 1 - y) / rayY
    const ceilZ = (cellZ + 1 - z) / rayZ

    const stepX = rayX > 0 ? 1 : rayX < 0 ? -1 : 0
    const stepY = rayY > 0 ? 1 : rayY < 0 ? -1 : 0
    const stepZ = rayZ > 0 ? 1 : rayZ < 0 ? -1 : 0

    const deltaX = stepX / rayX
    const deltaY = stepY / rayY
    const deltaZ = stepZ / rayZ

    var maxX = floorX > ceilX ? floorX : ceilX
    var maxY = floorY > ceilY ? floorY : ceilY
    var maxZ = floorZ > ceilZ ? floorZ : ceilZ
    var axis = 0

    for i in 0..1000 {
      result.distance = maxX < maxY
        ? maxX < maxZ ? maxX : maxZ
        : maxY < maxZ ? maxY : maxZ

      if result.distance == maxX {
        result.cellX += stepX
        maxX += deltaX
        axis = 0
      }

      else if result.distance == maxY {
        result.cellY += stepY
        maxY += deltaY
        axis = 1
      }

      else {
        result.cellZ += stepZ
        maxZ += deltaZ
        axis = 2
      }

      if get(result.cellX, result.cellY, result.cellZ) != .EMPTY {
        if axis == 0 { result.normalX = -stepX }
        else if axis == 1 { result.normalY = -stepY }
        else { result.normalZ = -stepZ }
        return true
      }
    }

    return false
  }

  def stepRadiosity {
    var radiosity = Radiosity.new(self)
    var quads List<Quad> = []

    # Do all lightmap invalidation ahead of time
    for chunk in _chunkList {
      for quad in chunk.quads {
        var x = quad.x
        var y = quad.y
        var z = quad.z

        var u = quad.u
        var v = quad.v
        var n = quad.n

        var ux = u.x
        var uy = u.y
        var uz = u.z

        var vx = v.x
        var vy = v.y
        var vz = v.z

        assert(Lightmap.SAMPLE_DENSITY == 2)

        # Accumulate normals even for emissive lights so that samples on boundary quads have enough epsilon offset
        radiosity.recordSample(x, y, z, n)
        radiosity.recordSample(x + ux, y + uy, z + uz, n)
        radiosity.recordSample(x + vx, y + vy, z + vz, n)
        radiosity.recordSample(x + ux + vx, y + uy + vy, z + uz + vz, n)

        if quad.color == .WHITE {
          radiosity.recordLight(
            quad.x + (ux + vx) * 0.5 + n.x * 0.01,
            quad.y + (uy + vy) * 0.5 + n.y * 0.01,
            quad.z + (uz + vz) * 0.5 + n.z * 0.01,
            n, 1)
        }

        else {
          quads.append(quad)
        }
      }
    }

    # Run all samples at once (samples are shared across quads for efficiency)
    radiosity.runGatherPass

    var lightmap = _lightmap
    var width = lightmap.currentWidth
    var data = lightmap.currentData
    var stride = width * (Lightmap.SAMPLE_DENSITY * 4)

    # Read out radiosity results
    for quad in quads {
      var x = quad.x
      var y = quad.y
      var z = quad.z

      var u = quad.u
      var v = quad.v
      var n = quad.n

      var ux = u.x
      var uy = u.y
      var uz = u.z

      var vx = v.x
      var vy = v.y
      var vz = v.z

      var sample00 = radiosity.fetchSample(x, y, z, n)
      var sample10 = radiosity.fetchSample(x + ux, y + uy, z + uz, n)
      var sample01 = radiosity.fetchSample(x + vx, y + vy, z + vz, n)
      var sample11 = radiosity.fetchSample(x + ux + vx, y + uy + vy, z + uz + vz, n)

      var cell = lightmap.handleToCell(quad.handle)
      var cellX = cell % width
      var index = (cellX + (cell - cellX) * Lightmap.SAMPLE_DENSITY) * (Lightmap.SAMPLE_DENSITY * 4)
      var color = quad.color

      assert(Lightmap.SAMPLE_DENSITY == 2)
      _writeSample(data, index, sample00, color)
      _writeSample(data, index + 4, sample10, color)
      _writeSample(data, index + stride, sample01, color)
      _writeSample(data, index + stride + 4, sample11, color)
    }
  }
}

namespace Voxels {
  const _vertices = DataArray.new

  # Each chunk has a CELLS_SIZE * CELLS_SIZE * CELLS_SIZE block of cells
  const CELLS_SHIFT = 3
  const CELLS_SIZE = 1 << CELLS_SHIFT
  const CELLS_MASK = (1 << CELLS_SHIFT) - 1

  # Chunk coordinates fit in a 32-bit integer (1 in chunk coordinates corresponds to CELLS_SIZE in cell coordinates)
  const CHUNK_BITS_X = 11
  const CHUNK_BITS_Y = 10
  const CHUNK_BITS_Z = 11
  const CHUNK_MASK_X = (1 << CHUNK_BITS_X) - 1
  const CHUNK_MASK_Y = (1 << CHUNK_BITS_Y) - 1
  const CHUNK_MASK_Z = (1 << CHUNK_BITS_Z) - 1

  def _isValid(cellX int, cellY int, cellZ int) bool {
    return
      cellX == (cellX << (32 - CHUNK_BITS_X - CELLS_SHIFT) >> (32 - CHUNK_BITS_X - CELLS_SHIFT)) &&
      cellY == (cellY << (32 - CHUNK_BITS_Y - CELLS_SHIFT) >> (32 - CHUNK_BITS_Y - CELLS_SHIFT)) &&
      cellZ == (cellZ << (32 - CHUNK_BITS_Z - CELLS_SHIFT) >> (32 - CHUNK_BITS_Z - CELLS_SHIFT))
  }

  def _key(cellX int, cellY int, cellZ int) int {
    assert(_isValid(cellX, cellY, cellZ))
    return
      (cellX >> CELLS_SHIFT & CHUNK_MASK_X) |
      (cellY >> CELLS_SHIFT & CHUNK_MASK_Y) << CHUNK_BITS_X |
      (cellZ >> CELLS_SHIFT & CHUNK_MASK_Z) << (CHUNK_BITS_X + CHUNK_BITS_Y)
  }

  def _writeSample(data Uint8Array, index int, sample double, color Color) {
    var colorR = (sample * color.red) as int
    var colorG = (sample * color.green) as int
    var colorB = (sample * color.blue) as int

    data[index]     = colorR < 255 ? colorR : 255
    data[index + 1] = colorG < 255 ? colorG : 255
    data[index + 2] = colorB < 255 ? colorB : 255
    data[index + 3] = 255
  }

  class Quad {
    const x int
    const y int
    const z int

    const u Delta
    const v Delta
    const n Normal

    const color Color
    var handle = Lightmap.Handle.INVALID_VALUE

    # Returns a 32-bit integer that uniquely identifies a quad within a chunk
    def id int {
      assert(3 * CELLS_SHIFT + 2 * 3 <= 32)
      return
        (x & CELLS_MASK) |
        (y & CELLS_MASK) << CELLS_SHIFT |
        (z & CELLS_MASK) << (CELLS_SHIFT * 2) |
        u as int << (CELLS_SHIFT * 3) |
        v as int << (CELLS_SHIFT * 3 + 3)
    }
  }

  class Chunk {
    const _lightmap Lightmap
    const originX int
    const originY int
    const originZ int
    const cells = Uint8Array.new(CELLS_SIZE * CELLS_SIZE * CELLS_SIZE)

    var xneg Chunk = null
    var xpos Chunk = null
    var yneg Chunk = null
    var ypos Chunk = null
    var zneg Chunk = null
    var zpos Chunk = null

    var _cachedQuads List<Quad> = null
    var _cachedArea GPU.BufferArea = null
    var _isInvalid = true
    var _generation = 0

    def get(localX int, localY int, localZ int) Cell {
      assert(0 <= localX && localX < CELLS_SIZE)
      assert(0 <= localY && localY < CELLS_SIZE)
      assert(0 <= localZ && localZ < CELLS_SIZE)
      return cells[localX | localY << CELLS_SHIFT | localZ << 2 * CELLS_SHIFT] as Cell
    }

    def set(localX int, localY int, localZ int, cell Cell) {
      assert(0 <= localX && localX < CELLS_SIZE)
      assert(0 <= localY && localY < CELLS_SIZE)
      assert(0 <= localZ && localZ < CELLS_SIZE)
      var index = localX | localY << CELLS_SHIFT | localZ << 2 * CELLS_SHIFT

      if cells[index] != cell {
        cells[index] = cell
        _invalidate

        if localX == 0 { xneg?._invalidate }
        else if localX == CELLS_MASK { xpos?._invalidate }

        if localY == 0 { yneg?._invalidate }
        else if localY == CELLS_MASK { ypos?._invalidate }

        if localZ == 0 { zneg?._invalidate }
        else if localZ == CELLS_MASK { zpos?._invalidate }
      }
    }

    def _invalidate {
      _isInvalid = true
      _cachedArea?.free
      _cachedArea = null
    }

    def quads List<Quad> {
      if _isInvalid {
        var oldHandles IntMap<Lightmap.Handle> = {}
        var originX = self.originX
        var originY = self.originY
        var originZ = self.originZ
        var cells = self.cells
        var xneg = self.xneg
        var xpos = self.xpos
        var yneg = self.yneg
        var ypos = self.ypos
        var zneg = self.zneg
        var zpos = self.zpos
        var i = 0

        if _cachedQuads != null {
          for quad in _cachedQuads {
            oldHandles[quad.id] = quad.handle
          }
        }

        _cachedQuads = []
        _isInvalid = false

        for z in 0..CELLS_SIZE {
          for y in 0..CELLS_SIZE {
            for x in 0..CELLS_SIZE {
              var cell = cells[i] as Cell

              if cell == .EMPTY {
                const SIZE = CELLS_SIZE
                const MASK = CELLS_MASK
                const SHIFT = CELLS_SHIFT

                var globalX = originX + x
                var globalY = originY + y
                var globalZ = originZ + z

                var xnegCell = x > 0    ? cells[i - 1]           as Cell : xneg != null ? xneg.cells[i ^ MASK]                as Cell : Cell.SOLID
                var ynegCell = y > 0    ? cells[i - SIZE]        as Cell : yneg != null ? yneg.cells[i ^ (MASK << SHIFT)]     as Cell : Cell.SOLID
                var znegCell = z > 0    ? cells[i - SIZE * SIZE] as Cell : zneg != null ? zneg.cells[i ^ (MASK << 2 * SHIFT)] as Cell : Cell.SOLID
                var xposCell = x < MASK ? cells[i + 1]           as Cell : xpos != null ? xpos.cells[i ^ MASK]                as Cell : Cell.SOLID
                var yposCell = y < MASK ? cells[i + SIZE]        as Cell : ypos != null ? ypos.cells[i ^ (MASK << SHIFT)]     as Cell : Cell.SOLID
                var zposCell = z < MASK ? cells[i + SIZE * SIZE] as Cell : zpos != null ? zpos.cells[i ^ (MASK << 2 * SHIFT)] as Cell : Cell.SOLID

                if xnegCell != .EMPTY { _appendQuad(globalX, globalY, globalZ, .Y, .Z, .XPOS, xnegCell.color, oldHandles) }
                if ynegCell != .EMPTY { _appendQuad(globalX, globalY, globalZ, .Z, .X, .YPOS, ynegCell.color, oldHandles) }
                if znegCell != .EMPTY { _appendQuad(globalX, globalY, globalZ, .X, .Y, .ZPOS, znegCell.color, oldHandles) }
                if xposCell != .EMPTY { _appendQuad(globalX + 1, globalY, globalZ, .Z, .Y, .XNEG, xposCell.color, oldHandles) }
                if yposCell != .EMPTY { _appendQuad(globalX, globalY + 1, globalZ, .X, .Z, .YNEG, yposCell.color, oldHandles) }
                if zposCell != .EMPTY { _appendQuad(globalX, globalY, globalZ + 1, .Y, .X, .ZNEG, zposCell.color, oldHandles) }
              }

              i++
            }
          }
        }

        _lightmap.freeAll(oldHandles)
      }

      return _cachedQuads
    }

    def _appendQuad(x int, y int, z int, u Delta, v Delta, n Normal, color Color, oldHandles IntMap<Lightmap.Handle>) {
      var quad = Quad.new(x, y, z, u, v, n, color)
      var id = quad.id
      var handle = oldHandles.get(id, .INVALID_VALUE)

      # Try to preserve quad handles across chunk invalidations
      if handle != .INVALID_VALUE {
        quad.handle = handle
        oldHandles.remove(id)
      } else {
        quad.handle = _lightmap.allocate(color)
      }

      _cachedQuads.append(quad)
    }

    def area(pool GPU.BufferPool) GPU.BufferArea {
      # Update texture coordinates when the lightmap changes size
      if _generation != _lightmap.generation {
        _generation = _lightmap.generation
        _cachedArea?.free
        _cachedArea = null
      }

      if _cachedArea == null {
        _vertices.clear

        var lightmap = _lightmap

        for quad in quads {
          var x = quad.x
          var y = quad.y
          var z = quad.z

          var u = quad.u
          var v = quad.v

          var ux = u.x
          var uy = u.y
          var uz = u.z

          var vx = v.x
          var vy = v.y
          var vz = v.z

          var uvx = x + ux + vx
          var uvy = y + uy + vy
          var uvz = z + uz + vz

          var cell = lightmap.handleToCell(quad.handle)
          var s0 = lightmap.cellLeft(cell)
          var t0 = lightmap.cellTop(cell)
          var s1 = lightmap.cellRight(cell)
          var t1 = lightmap.cellBottom(cell)

          _vertices.appendFloat(x)
          _vertices.appendFloat(y)
          _vertices.appendFloat(z)
          _vertices.appendFloat(s0)
          _vertices.appendFloat(t0)

          _vertices.appendFloat(x + ux)
          _vertices.appendFloat(y + uy)
          _vertices.appendFloat(z + uz)
          _vertices.appendFloat(s1)
          _vertices.appendFloat(t0)

          _vertices.appendFloat(uvx)
          _vertices.appendFloat(uvy)
          _vertices.appendFloat(uvz)
          _vertices.appendFloat(s1)
          _vertices.appendFloat(t1)

          _vertices.appendFloat(x)
          _vertices.appendFloat(y)
          _vertices.appendFloat(z)
          _vertices.appendFloat(s0)
          _vertices.appendFloat(t0)

          _vertices.appendFloat(uvx)
          _vertices.appendFloat(uvy)
          _vertices.appendFloat(uvz)
          _vertices.appendFloat(s1)
          _vertices.appendFloat(t1)

          _vertices.appendFloat(x + vx)
          _vertices.appendFloat(y + vy)
          _vertices.appendFloat(z + vz)
          _vertices.appendFloat(s0)
          _vertices.appendFloat(t1)
        }

        _cachedArea = pool.allocate(GPU.VertexFormat.POSITION_F3_COORD_F2, _vertices.bytes)
      }

      return _cachedArea
    }
  }
}
