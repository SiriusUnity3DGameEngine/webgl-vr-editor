class Font {
  const _context GPU.Context
  const _material GPU.Material
  const _pool GPU.BufferPool
  const _glyphTable List<double>
  const _tracking double
  const _vertices = DataArray.new

  def measureText(text string, fontSize double, phi double) double {
    const phiC = Math.cos(phi)
    const table = _glyphTable
    var theta = 0.0

    for i in 0..text.count {
      var c = text[i]

      if c < 0x20 || c > 0x7E {
        continue
      }

      const index = c * 4 - 0x20 * 4
      const s0 = table[index]
      const s1 = table[index + 2]
      const sizeS = fontSize * (s1 - s0) * 8

      theta += (2 * sizeS + fontSize * _tracking) / phiC
    }

    return theta
  }

  def placeText(text string, fontSize double, x double, y double, z double, theta double, phi double, radius double, color Color) {
    const phiC = Math.cos(phi)
    const phiS = Math.sin(phi)
    const table = _glyphTable
    const vertices = _vertices

    for i in 0..text.count {
      var c = text[i]

      if c < 0x20 || c > 0x7E {
        continue
      }

      const index = c * 4 - 0x20 * 4
      const s0 = table[index]
      const t0 = 1 - table[index + 3]
      const s1 = table[index + 2]
      const t1 = 1 - table[index + 1]

      # Multiply by 8 since it's a 16x16 grid and the glyph is centered
      const sizeS = radius * fontSize * (s1 - s0) * 8
      const sizeT = radius * fontSize * (t1 - t0) * 8

      theta += sizeS / (phiC * radius)

      const thetaC = Math.cos(theta)
      const thetaS = Math.sin(theta)

      const cx = x + thetaS * phiC * radius
      const cy = y + phiS * radius
      const cz = z - thetaC * phiC * radius

      const sx = thetaC * sizeS
      const sy = 0.0
      const sz = thetaS * sizeS

      const tx = -thetaS * phiS * sizeT
      const ty = phiC * sizeT
      const tz = thetaC * phiS * sizeT

      vertices.appendFloat(cx - sx - tx)
      vertices.appendFloat(cy - sy - ty)
      vertices.appendFloat(cz - sz - tz)
      vertices.appendFloat(s0)
      vertices.appendFloat(t0)
      vertices.appendColor(color)

      vertices.appendFloat(cx + sx - tx)
      vertices.appendFloat(cy + sy - ty)
      vertices.appendFloat(cz + sz - tz)
      vertices.appendFloat(s1)
      vertices.appendFloat(t0)
      vertices.appendColor(color)

      vertices.appendFloat(cx + sx + tx)
      vertices.appendFloat(cy + sy + ty)
      vertices.appendFloat(cz + sz + tz)
      vertices.appendFloat(s1)
      vertices.appendFloat(t1)
      vertices.appendColor(color)

      vertices.appendFloat(cx - sx - tx)
      vertices.appendFloat(cy - sy - ty)
      vertices.appendFloat(cz - sz - tz)
      vertices.appendFloat(s0)
      vertices.appendFloat(t0)
      vertices.appendColor(color)

      vertices.appendFloat(cx + sx + tx)
      vertices.appendFloat(cy + sy + ty)
      vertices.appendFloat(cz + sz + tz)
      vertices.appendFloat(s1)
      vertices.appendFloat(t1)
      vertices.appendColor(color)

      vertices.appendFloat(cx - sx + tx)
      vertices.appendFloat(cy - sy + ty)
      vertices.appendFloat(cz - sz + tz)
      vertices.appendFloat(s0)
      vertices.appendFloat(t1)
      vertices.appendColor(color)

      theta += (sizeS + radius * fontSize * _tracking) / (phiC * radius)
    }
  }

  def draw {
    if _vertices.isEmpty {
      return
    }

    var area = _pool.allocate(GPU.VertexFormat.POSITION_F3_COORD_F2_COLOR_B4, _vertices.bytes)
    _context.draw(.TRIANGLES, _material, area, .NO_CULLING)
    area.free

    # Clear the list instead of allocating a new one
    _vertices.clear
  }
}

namespace Font {
  const BERLIN_SANS_GLYPH_TABLE = [
    0.0206719, 0.125, 0.0408281, 0.1875, # ' '
    0.0859375, 0.125, 0.101563, 0.1875,  # '!'
    0.146484, 0.125, 0.166016, 0.1875,   # '"'
    0.201172, 0.125, 0.236328, 0.1875,   # '#'
    0.269531, 0.125, 0.292969, 0.1875,   # '$'
    0.324219, 0.125, 0.363281, 0.1875,   # '%'
    0.386719, 0.125, 0.425781, 0.1875,   # '&'
    0.460938, 0.125, 0.476563, 0.1875,   # '\''
    0.519531, 0.125, 0.542969, 0.1875,   # '('
    0.582031, 0.125, 0.605469, 0.1875,   # ')'
    0.644531, 0.125, 0.667969, 0.1875,   # '*'
    0.707031, 0.125, 0.730469, 0.1875,   # '+'
    0.773438, 0.125, 0.789063, 0.1875,   # ','
    0.832031, 0.125, 0.855469, 0.1875,   # '-'
    0.898438, 0.125, 0.914063, 0.1875,   # '.'
    0.958984, 0.125, 0.978516, 0.1875,   # '/'
    0.0136719, 0.1875, 0.0488281, 0.25,  # '0'
    0.0839844, 0.1875, 0.103516, 0.25,   # '1'
    0.142578, 0.1875, 0.169922, 0.25,    # '2'
    0.205078, 0.1875, 0.232422, 0.25,    # '3'
    0.265625, 0.1875, 0.296875, 0.25,    # '4'
    0.330078, 0.1875, 0.357422, 0.25,    # '5'
    0.390625, 0.1875, 0.421875, 0.25,    # '6'
    0.455078, 0.1875, 0.482422, 0.25,    # '7'
    0.517578, 0.1875, 0.544922, 0.25,    # '8'
    0.578125, 0.1875, 0.609375, 0.25,    # '9'
    0.648438, 0.1875, 0.664063, 0.25,    # ':'
    0.710938, 0.1875, 0.726563, 0.25,    # ';'
    0.769531, 0.1875, 0.792969, 0.25,    # '<'
    0.830078, 0.1875, 0.857422, 0.25,    # '='
    0.894531, 0.1875, 0.917969, 0.25,    # '>'
    0.957031, 0.1875, 0.980469, 0.25,    # '?'
    0.0136719, 0.25, 0.0488281, 0.3125,  # '@'
    0.0761719, 0.25, 0.111328, 0.3125,   # 'A'
    0.138672, 0.25, 0.173828, 0.3125,    # 'B'
    0.201172, 0.25, 0.236328, 0.3125,    # 'C'
    0.261719, 0.25, 0.300781, 0.3125,    # 'D'
    0.328125, 0.25, 0.359375, 0.3125,    # 'E'
    0.390625, 0.25, 0.421875, 0.3125,    # 'F'
    0.449219, 0.25, 0.488281, 0.3125,    # 'G'
    0.511719, 0.25, 0.550781, 0.3125,    # 'H'
    0.585938, 0.25, 0.601563, 0.3125,    # 'I'
    0.646484, 0.25, 0.666016, 0.3125,    # 'J'
    0.701172, 0.25, 0.736328, 0.3125,    # 'K'
    0.765625, 0.25, 0.796875, 0.3125,    # 'L'
    0.824219, 0.25, 0.863281, 0.3125,    # 'M'
    0.886719, 0.25, 0.925781, 0.3125,    # 'N'
    0.949219, 0.25, 0.988281, 0.3125,    # 'O'
    0.0136719, 0.3125, 0.0488281, 0.375, # 'P'
    0.0742188, 0.3125, 0.113281, 0.375,  # 'Q'
    0.138672, 0.3125, 0.173828, 0.375,   # 'R'
    0.205078, 0.3125, 0.232422, 0.375,   # 'S'
    0.265625, 0.3125, 0.296875, 0.375,   # 'T'
    0.326172, 0.3125, 0.361328, 0.375,   # 'U'
    0.388672, 0.3125, 0.423828, 0.375,   # 'V'
    0.445313, 0.3125, 0.492188, 0.375,   # 'W'
    0.515625, 0.3125, 0.546875, 0.375,   # 'X'
    0.576172, 0.3125, 0.611328, 0.375,   # 'Y'
    0.640625, 0.3125, 0.671875, 0.375,   # 'Z'
    0.707031, 0.3125, 0.730469, 0.375,   # '['
    0.771484, 0.3125, 0.791016, 0.375,   # '\\'
    0.832031, 0.3125, 0.855469, 0.375,   # ']'
    0.892578, 0.3125, 0.919922, 0.375,   # '^'
    0.955078, 0.3125, 0.982422, 0.375,   # '_'
    0.0195313, 0.375, 0.0429688, 0.4375, # '`'
    0.078125, 0.375, 0.109375, 0.4375,   # 'a'
    0.140625, 0.375, 0.171875, 0.4375,   # 'b'
    0.207031, 0.375, 0.230469, 0.4375,   # 'c'
    0.265625, 0.375, 0.296875, 0.4375,   # 'd'
    0.330078, 0.375, 0.357422, 0.4375,   # 'e'
    0.396484, 0.375, 0.416016, 0.4375,   # 'f'
    0.453125, 0.375, 0.484375, 0.4375,   # 'g'
    0.515625, 0.375, 0.546875, 0.4375,   # 'h'
    0.585938, 0.375, 0.601563, 0.4375,   # 'i'
    0.648438, 0.375, 0.664063, 0.4375,   # 'j'
    0.703125, 0.375, 0.734375, 0.4375,   # 'k'
    0.773438, 0.375, 0.789063, 0.4375,   # 'l'
    0.822266, 0.375, 0.865234, 0.4375,   # 'm'
    0.890625, 0.375, 0.921875, 0.4375,   # 'n'
    0.953125, 0.375, 0.984375, 0.4375,   # 'o'
    0.015625, 0.4375, 0.046875, 0.5,     # 'p'
    0.078125, 0.4375, 0.109375, 0.5,     # 'q'
    0.144531, 0.4375, 0.167969, 0.5,     # 'r'
    0.208984, 0.4375, 0.228516, 0.5,     # 's'
    0.269531, 0.4375, 0.292969, 0.5,     # 't'
    0.328125, 0.4375, 0.359375, 0.5,     # 'u'
    0.390625, 0.4375, 0.421875, 0.5,     # 'v'
    0.449219, 0.4375, 0.488281, 0.5,     # 'w'
    0.517578, 0.4375, 0.544922, 0.5,     # 'x'
    0.580078, 0.4375, 0.607422, 0.5,     # 'y'
    0.642578, 0.4375, 0.669922, 0.5,     # 'z'
    0.707031, 0.4375, 0.730469, 0.5,     # '{'
    0.771484, 0.4375, 0.791016, 0.5,     # '|'
    0.832031, 0.4375, 0.855469, 0.5,     # '}'
    0.892578, 0.4375, 0.919922, 0.5,     # '~'
  ]
}
